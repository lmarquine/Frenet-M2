<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Bruno Gemelli <bruno.gemelli@magedin.com>
 * @author    Tiago Sampaio <tiago.sampaio@magedin.com>
 */

namespace MagedIn\Frenet\Model;

class ServiceRepository implements \MagedIn\Frenet\Api\ServiceRepositoryInterface
{

    /** @var \string */
    const API_BASE_URI = 'http://api.frenet.com.br/';

    /** @var \string */
    const API_SHIPPING_QUOTE_URN = 'shipping/quote';

    /** @var \string */
    const CONFIG_TOKEN_XPATH = 'carriers/magedinfrenet/token';

    /** @var \Magento\Catalog\Model\ProductRepository */
    protected $productRepository;

    /** @var \Magento\Framework\HTTP\ZendClientFactory */
    protected $zendClientFactory;

    /** @var \Magento\Framework\App\Config\ScopeConfigInterface */
    protected $scopeConfig;

    /**
     * ServiceRepository constructor.
     *
     * @param \Magento\Catalog\Model\ProductRepository           $productRepository
     * @param \Magento\Framework\HTTP\ZendClientFactory          $zendClientFactory
     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
     */
    public function __construct(
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Magento\Framework\HTTP\ZendClientFactory $zendClientFactory,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
    ) {
        $this->productRepository = $productRepository;
        $this->zendClientFactory = $zendClientFactory;
        $this->scopeConfig       = $scopeConfig;
    }

    /**
     * Handle Frenet API request for shipping quote
     *
     * @param \Magento\Quote\Model\Quote\Address\RateRequest $rateRequest
     *
     * @return mixed|null
     * 
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     * @throws \Zend_Http_Client_Exception
     */
    public function getShippingQuote(\Magento\Quote\Model\Quote\Address\RateRequest $rateRequest)
    {
        $apiBodyRequest = [
            'SellerCEP'             => $this->getConfigData('shipping/origin/postcode'),
            'RecipientCEP'          => $rateRequest->getDestPostcode(),
            'ShipmentInvoiceValue'  => $rateRequest->getPackageValueWithDiscount(),
            'ShippingItemArray'     => $this->prepareQuoteItems($rateRequest),
        ];

        $response = $this->request(
            self::API_SHIPPING_QUOTE_URN,
            $apiBodyRequest
        );

        /**
         * 'ShippingSevicesArray' is with an typo but it's the node currently returned from service.
         */
        if (!isset($response['ShippingSevicesArray'])) {
            /** @todo Throw exception or/and log it. */
            return null;
        }

        return $response['ShippingSevicesArray'];
    }
    
    /**
     * @param \Magento\Quote\Model\Quote\Address\RateRequest $rateRequest
     *
     * @return array
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    private function prepareQuoteItems(\Magento\Quote\Model\Quote\Address\RateRequest $rateRequest)
    {
        $items = [];

        /** @var \Magento\Quote\Api\Data\CartItemInterface $item */
        foreach ($rateRequest->getAllItems() as $item) {
            /**
             * Skip bundle and configurable product types
             */
            if ($item->getProductType() != \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
                continue;
            }

            $hasParent = ($item->getParentItemId()) ? true : false;
            $product   = $this->productRepository->getById($item->getProductId());

            $items[] = [
                'Weight'    => $product->getWeight(),
                'Length'    => $product->getData('ts_dimensions_length'),
                'Height'    => $product->getData('ts_dimensions_height'),
                'Width'     => $product->getData('ts_dimensions_width'),
                'Quantity'  => ($hasParent) ? $item->getParentItem()->getQty() : $item->getQty(),
            ];
        }

        return $items;
    }
    
    /**
     * @param string $endpoint
     * @param array $data
     * @param string|null $method
     *
     * @return array
     *
     * @throws \Zend_Http_Client_Exception
     */
    private function request($endpoint, $data, $method = \Zend_Http_Client::POST)
    {
        /** @var \Magento\Framework\HTTP\ZendClient $client */
        $client = $this->zendClientFactory->create();

        $client->setUri(self::API_BASE_URI.$endpoint)
            ->setMethod($method)
            ->setRawData(json_encode($data), 'application/json')
            ->setUrlEncodeBody(false)
            ->setHeaders([
                'Content-Type' => 'application/json',
                'token'        => $this->getConfigData('carriers/magedinfrenet/token')
            ]);

        /** @var \Zend_Http_Response $response */
        $response = $client->request();

        if (!$response->isSuccessful()) {
            /** @todo Throw exception or/and log it. */
            return null;
        }

        /** @todo Log the result? */

        $bodyResponse = json_decode($response->getBody(), true);

        return $bodyResponse;
    }
    
    /**
     * @param \string $path
     *
     * @return mixed
     */
    private function getConfigData($path)
    {
        return $this->scopeConfig->getValue($path, \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }
}
