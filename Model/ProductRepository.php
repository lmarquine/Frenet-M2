<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Bruno Gemelli <bruno.gemelli@magedin.com>
 */

namespace MagedIn\Frenet\Model;

use MagedIn\Frenet\Model\Source\WeightType as WeightType;

class ProductRepository implements \MagedIn\Frenet\Api\ProductRepositoryInterface
{

    /** @var \Psr\Log\LoggerInterface */
    private $logger;

    /** @var \Magento\Catalog\Model\ProductRepository */
    private $_productRepository;

    /** @var boolean */
    private $useDefault;

    /** @var mixed */
    private $defaultLength;

    /** @var mixed */
    private $defaultWidth;

    /** @var mixed */
    private $defaultHeight;

    /** @var mixed */
    private $defaultWeight;

    /** @var mixed */
    private $weightType;

    /** @var \MagedIn\Frenet\Model\CategoryRepository */
    private $categoryRepository;

    /**
     * ProductRepository constructor.
     *
     * @param CategoryRepository                       $categoryRepository
     * @param \Psr\Log\LoggerInterface                 $logger
     * @param \Magento\Catalog\Model\ProductRepository $productRepository
     */
    public function __construct(
        CategoryRepository $categoryRepository,
        \Psr\Log\LoggerInterface $logger,
        \Magento\Catalog\Model\ProductRepository $productRepository
    ) {
        $this->_productRepository = $productRepository;
        $this->logger             = $logger;
        $this->categoryRepository = $categoryRepository;
    }

    /**
     * {@inheritdoc}
     */
    public function setDefault($useDefault, $length, $width, $height, $weight, $weightType)
    {
        $this->useDefault = $useDefault;
        $this->defaultLength = $length;
        $this->defaultWidth = $width;
        $this->defaultHeight = $height;
        $this->defaultWeight = $weight;
        $this->weightType = $weightType;

        return $this;
    }

    /**
     * @param \Magento\Quote\Api\Data\CartItemInterface $item
     *
     * @return array
     */
    public function getShippingItem($item)
    {
        // Product informations
        $diameter = 0;
        $isFragile = false;
        $categories = null;
        $sku = null;

        /**
         * Skip bundle and configurable product types
         */
        if ($item->getProductType() != \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
            return null;
        }

        if ($item->getParentItemId()) {
            $qty = $item->getParentItem()->getQty();
        } else {
            $qty = $item->getQty();
        }

        /** @var \Magento\Catalog\Api\Data\ProductInterface $product */
        $product = $this->_productRepository->getById($item->getProductId());

        // Fragile
        $isFragile = $product->getFragile();

        // SKU
        $sku = $product->getSku();
        // Diameter
        $diameter = 0;

        /**
         * Using default values.
         */
        $length = $this->defaultLength;
        $height = $this->defaultHeight;
        $width  = $this->defaultWidth;
        $weight = $this->defaultWeight;

        /**
         * Not use default values.
         */
        if (!$this->useDefault) {
            $length = $this->extractProductData($product, 'volume_comprimento', $length);
            $height = $this->extractProductData($product, 'volume_altura', $height);
            $width  = $this->extractProductData($product, 'volume_largura', $width);
            $weight = $product->getWeight() > 0 ? $product->getWeight() : $weight;
        }

        /**
         * Calculate the weight accordingly to the weight type (grams or kilos).
         */
        if (WeightType::WEIGHT_GR == $this->weightType) {
            $weight = $product->getWeight() * 1000;
        }

        $categories = $this->categoryRepository->getCategories($product);

        $shippingItem = [
            'Weight'    => $weight,
            'Length'    => $length,
            'Height'    => $height,
            'Width'     => $width,
            'Quantity'  => $qty,
            'SKU'       => $sku,
            'Category'  => $categories,
            'isFragile' => $isFragile
        ];

        return $shippingItem;
    }

    /**
     * @param \Magento\Catalog\Api\Data\ProductInterface $product
     * @param string                                     $key
     * @param null|mixed                                 $defaultValue
     *
     * @return null|mixed
     */
    private function extractProductData(\Magento\Catalog\Api\Data\ProductInterface $product, $key, $defaultValue = null)
    {
        if (!$product->getData($key)) {
            return $defaultValue;
        }

        return $product->getData($key);
    }
}
