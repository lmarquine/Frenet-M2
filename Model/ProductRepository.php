<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Bruno Gemelli <bruno.gemelli@magedin.com>
 */

namespace MagedIn\Frenet\Model;

use MagedIn\Frenet\Model\Source\WeightType as WeightType;

class ProductRepository implements \MagedIn\Frenet\Api\ProductRepositoryInterface
{

    protected $logger;

    
    /**
     * @var \Magento\Catalog\Model\ProductRepository
     */
    protected $_productRepository;

    /**
     * @var \MagedIn\Frenet\Model\CategoryRepository 
     * /
    protected $_category;

    protected $_use_default;
    protected $_default_length;
    protected $_default_width;
    protected $_default_height; 
    protected $_weight_type;

    /**
     * ServiceRepository constructor.
     *
     * @param Context $context
     */
    public function __construct(
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \MagedIn\Frenet\Model\CategoryRepository $category,
        \Psr\Log\LoggerInterface $logger        
    )
    {
        $this->_productRepository = $productRepository;
        $this->logger = $logger;
        $this->_category = $category;
        
        $this->logger->debug("Frenet produto iniciado");        
    }

    /**
     * @param \Magento\Quote\Api\Data\CartItemInterface $item
     * 
     * @return array
     */
    public function setDefault($use_default, 
        $default_length, 
        $default_width, 
        $default_height, 
        $default_weight,
        $weight_type) {      

        $this->_use_default = $use_default;
        $this->_default_length = $default_length;
        $this->_default_width = $default_width;
        $this->_default_height = $default_height; 
        $this->_default_weight = $default_weight;
        $this->_weight_type = $weight_type;
    }

    /**
     * @param \Magento\Quote\Api\Data\CartItemInterface $item
     * 
     * @return array
     */
    public function getShippingItem($item) {        

        // Product informations
        $diameter = 0;
        $isFragile = false;        
        $categories = null;
        $sku = null;
        
        /**
         * Skip bundle and configurable product types
         */
        if ($item->getProductType() != \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE) {
            return null;
        }

        $hasParent = ($item->getParentItemId()) ? true : false;
        $product   = $this->_productRepository->getById($item->getProductId());
        $parentProduct  = null;

        if ($hasParent) {
            $parentProduct = $this->_productRepository->getById($item->getParentItem()->getProductId());
            $qty = $item->getParentItem()->getQty();
        }
        else {
            $qty = $item->getQty();
        }

        // Fragile
        $isFragile = $product->getFragile();        
        
        // SKU
        $sku = $product->getSku();
        // Diameter
        $diameter = 0;
        
        if (0 == $this->_use_default) { 

            $length = ($product->getVolume_comprimento() > 0 ? $product->getVolume_comprimento()    : $this->_default_length );
            $height = ($product->getVolume_altura()      > 0 ? $product->getVolume_altura()         : $this->_default_height );
            $width = ($product->getVolume_largura()      > 0 ? $product->getVolume_largura()        : $this->_default_width );
            $weight = ($product->getWeight()             > 0 ? $product->getWeight()                : $this->_default_weight);
        }
        else {
            $length = $this->_default_length;
            $height = $this->_default_height;
            $width = $this->_default_width;
            $weight = $this->_default_weight;
        }

        // Weight calculate
        if (WeightType::WEIGHT_GR == $this->_weight_type ) {
            $weight = $product->getWeight() * 1000;
        }                

        $categories = $this->_category->getCategories($product);

        $shippingItem = [
            'Weight'    => $weight,
            'Length'    => $length,
            'Height'    => $height,
            'Width'     => $width,
            'Quantity'  => $qty,
            'SKU'       => $sku,
            'Category'  => $categories,
            'isFragile'  => $isFragile
        ];

        return $shippingItem;
    }

}