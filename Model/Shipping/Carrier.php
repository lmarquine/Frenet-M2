<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Bruno Gemelli <bruno.gemelli@magedin.com>
 */

namespace MagedIn\Frenet\Model\Shipping;

use Magento\Framework\Module\Dir;
use Magento\Framework\Xml\Security;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Setup\Exception;
use Magento\Shipping\Model\Rate\Result;

class Carrier extends \Magento\Shipping\Model\Carrier\AbstractCarrierOnline
    implements \Magento\Shipping\Model\Carrier\CarrierInterface
{
    /**
     * Code of the carrier
     *
     * @var string
     */
    protected $_code = 'magedinfrenet';

    /**
     * Rate result data
     *
     * @var Result|null
     */
    protected $_result = null;

    /**
     * @var \Magento\Catalog\Model\ProductRepository
     */
    protected $_productRepository;

    /**
     * @var \Magento\Framework\HTTP\ZendClientFactory
     */
    protected $_zendClientFactory;

    /**
     * @var \MagedIn\Frenet\Api\ServiceRepositoryInterface
     */
    protected $_serviceRepository;

    /**
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    protected $_scopeConfig;

    /**
     * @var \Magento\Shipping\Model\Rate\ResultFactory
     */
    protected $_rateFactory;


    /**
     * Carrier constructor.
     *
     * @param \Magento\Catalog\Model\ProductRepository $productRepository
     * @param \Magento\Framework\HTTP\ZendClientFactory $zendClientFactory
     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
     * @param \Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory $rateErrorFactory
     * @param \Psr\Log\LoggerInterface $logger
     * @param Security $xmlSecurity
     * @param \Magento\Shipping\Model\Simplexml\ElementFactory $xmlElFactory
     * @param \Magento\Shipping\Model\Rate\ResultFactory $rateFactory
     * @param \Magento\Quote\Model\Quote\Address\RateResult\MethodFactory $rateMethodFactory
     * @param \Magento\Shipping\Model\Tracking\ResultFactory $trackFactory
     * @param \Magento\Shipping\Model\Tracking\Result\ErrorFactory $trackErrorFactory
     * @param \Magento\Shipping\Model\Tracking\Result\StatusFactory $trackStatusFactory
     * @param \Magento\Directory\Model\RegionFactory $regionFactory
     * @param \Magento\Directory\Model\CountryFactory $countryFactory
     * @param \Magento\Directory\Model\CurrencyFactory $currencyFactory
     * @param \Magento\Directory\Helper\Data $directoryData
     * @param \Magento\CatalogInventory\Api\StockRegistryInterface $stockRegistry
     * @param array $data
     */
    public function __construct(
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Magento\Framework\HTTP\ZendClientFactory $zendClientFactory,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \MagedIn\Frenet\Api\ServiceRepositoryInterface $serviceRepository,
        \Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory $rateErrorFactory,
        \Psr\Log\LoggerInterface $logger,
        Security $xmlSecurity,
        \Magento\Shipping\Model\Simplexml\ElementFactory $xmlElFactory,
        \Magento\Shipping\Model\Rate\ResultFactory $rateFactory,
        \Magento\Quote\Model\Quote\Address\RateResult\MethodFactory $rateMethodFactory,
        \Magento\Shipping\Model\Tracking\ResultFactory $trackFactory,
        \Magento\Shipping\Model\Tracking\Result\ErrorFactory $trackErrorFactory,
        \Magento\Shipping\Model\Tracking\Result\StatusFactory $trackStatusFactory,
        \Magento\Directory\Model\RegionFactory $regionFactory,
        \Magento\Directory\Model\CountryFactory $countryFactory,
        \Magento\Directory\Model\CurrencyFactory $currencyFactory,
        \Magento\Directory\Helper\Data $directoryData,
        \Magento\CatalogInventory\Api\StockRegistryInterface $stockRegistry,
        array $data = []
    ) {
        $this->_productRepository = $productRepository;
        $this->_zendClientFactory = $zendClientFactory;
        $this->_serviceRepository = $serviceRepository;
        $this->_scopeConfig       = $scopeConfig;
        $this->_rateFactory       = $rateFactory;

        parent::__construct(
            $scopeConfig,
            $rateErrorFactory,
            $logger,
            $xmlSecurity,
            $xmlElFactory,
            $rateFactory,
            $rateMethodFactory,
            $trackFactory,
            $trackErrorFactory,
            $trackStatusFactory,
            $regionFactory,
            $countryFactory,
            $currencyFactory,
            $directoryData,
            $stockRegistry,
            $data
        );
    }


    /**
     * Processing additional validation (quote data) to check if carrier applicable.
     *
     * @param \Magento\Framework\DataObject $request
     *
     * @return $this|bool|\Magento\Framework\DataObject
     */
    public function proccessAdditionalValidation(\Magento\Framework\DataObject $request)
    {
        /**
         * validate request items data
         */
        if (!count($this->getAllItems($request))) {
            $this->_errors[] = __('There is no items in this order');
        }

        /**
         * validate destination postcode
         */
        if (!$request->getDestPostcode()) {
            $this->_errors[] = __('Please inform the destination postcode');
        }

        if (!empty($this->_errors)) {
            $this->debugErrors($this->_errors);
            return false;
        }

        return $this;
    }


    /**
     * @param RateRequest $request
     *
     * @return bool|\Magento\Framework\DataObject|\Magento\Quote\Model\Quote\Address\RateResult\Error|Result|null
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     * @throws \Zend_Http_Client_Exception
     */
    public function collectRates(RateRequest $request)
    {
        if (!$this->canCollectRates()) {
            $errorMessage = $this->getErrorMessage();
            $this->logger->debug("Frenet canCollectRates: " . $errorMessage );        
            return $errorMessage;
        }

        $responseItems = $this->_serviceRepository->getShippingQuote($request);

        /**
         * empty or invalid response
         */
        if (!$responseItems) {
            return $this->_result;
        }

        $this->_setResult($responseItems);

        return $this->_result;
    }


    /**
     * Checks if shipping method is correctly configured
     *
     * @return bool
     */
    public function canCollectRates()
    {
        /**
         * validate carrier active flag
         */
        if (!$this->getConfigFlag($this->_activeFlag)) {
            return false;
        }

        /**
         * validate origin postcode
         */
        if (!$this->_scopeConfig->getValue('shipping/origin/postcode', \Magento\Store\Model\ScopeInterface::SCOPE_STORE, $this->getStore())) {
            return false;
        }

        /**
         * validate frenet token
         */
        if (!$this->getConfigData('token')) {
            return false;
        }

        return true;
    }


    /**
     * Set returned options in Magento
     *
     * @param $responseItems
     *
     * @return $this
     */
    protected function _setResult($responseItems)
    {
        /** @var \Magento\Shipping\Model\Rate\Result $result */
        $result = $this->_rateFactory->create();

        foreach ($responseItems as $item) {
            $method = $this->_rateMethodFactory->create();
            $method->setCarrier($this->_code)
                ->setCarrierTitle($this->getConfigData('title'))
                ->setMethod($item['Carrier'].$item['ServiceDescription'])
                ->setMethodTitle($item['Carrier'].' - '.$item['ServiceDescription'])
                ->setPrice($item['ShippingPrice'])
                ->setCost($item['ShippingPrice']);
            $result->append($method);
        }

        $this->_result = $result;

        return $this;
    }


    /**
     * @param \Magento\Framework\DataObject $request
     *
     * @return \Magento\Framework\DataObject|null
     */
    protected function _doShipmentRequest(\Magento\Framework\DataObject $request)
    {
        return null;
    }


    /**
     * @return array
     */
    public function getAllowedMethods()
    {
        return [$this->_code => $this->getConfigData ('title')];
    }
}