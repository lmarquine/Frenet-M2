<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Bruno Gemelli <bruno.gemelli@magedin.com>
 */

namespace MagedIn\Frenet\Model\Shipping;

use Magento\Framework\Xml\Security;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Shipping\Model\Rate\Result;
use Magento\Shipping\Model\Carrier\AbstractCarrierOnline;
use Magento\Shipping\Model\Carrier\CarrierInterface;
use Magento\Store\Model\ScopeInterface;

class Carrier extends AbstractCarrierOnline implements CarrierInterface
{
    /**
     * Code of the carrier.
     * As it seems, this code cannot be separated by underscore (_).
     *
     * @var string
     */
    protected $_code = 'magedinfrenet';

    /** @var \Magento\Framework\App\Config\ScopeConfigInterface */
    protected $_scopeConfig;

    /** @var \Magento\Shipping\Model\Rate\ResultFactory */
    protected $_rateFactory;

    /**
     * Rate result data
     *
     * @var Result|null
     */
    private $result = null;

    /** @var \array */
    private $errors = [];

    /** @var \MagedIn\Frenet\Api\ServiceRepositoryInterface */
    private $serviceRepository;

    /**
     * Carrier constructor.
     *
     * @param \Magento\Framework\App\Config\ScopeConfigInterface          $scopeConfig
     * @param \MagedIn\Frenet\Api\ServiceRepositoryInterface              $serviceRepository
     * @param \Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory  $rateErrorFactory
     * @param \Psr\Log\LoggerInterface                                    $logger
     * @param Security                                                    $xmlSecurity
     * @param \Magento\Shipping\Model\Simplexml\ElementFactory            $xmlElFactory
     * @param \Magento\Shipping\Model\Rate\ResultFactory                  $rateFactory
     * @param \Magento\Quote\Model\Quote\Address\RateResult\MethodFactory $rateMethodFactory
     * @param \Magento\Shipping\Model\Tracking\ResultFactory              $trackFactory
     * @param \Magento\Shipping\Model\Tracking\Result\ErrorFactory        $trackErrorFactory
     * @param \Magento\Shipping\Model\Tracking\Result\StatusFactory       $trackStatusFactory
     * @param \Magento\Directory\Model\RegionFactory                      $regionFactory
     * @param \Magento\Directory\Model\CountryFactory                     $countryFactory
     * @param \Magento\Directory\Model\CurrencyFactory                    $currencyFactory
     * @param \Magento\Directory\Helper\Data                              $directoryData
     * @param \Magento\CatalogInventory\Api\StockRegistryInterface        $stockRegistry
     * @param array                                                       $data
     */
    public function __construct(
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \MagedIn\Frenet\Api\ServiceRepositoryInterface $serviceRepository,
        \Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory $rateErrorFactory,
        \Psr\Log\LoggerInterface $logger,
        Security $xmlSecurity,
        \Magento\Shipping\Model\Simplexml\ElementFactory $xmlElFactory,
        \Magento\Shipping\Model\Rate\ResultFactory $rateFactory,
        \Magento\Quote\Model\Quote\Address\RateResult\MethodFactory $rateMethodFactory,
        \Magento\Shipping\Model\Tracking\ResultFactory $trackFactory,
        \Magento\Shipping\Model\Tracking\Result\ErrorFactory $trackErrorFactory,
        \Magento\Shipping\Model\Tracking\Result\StatusFactory $trackStatusFactory,
        \Magento\Directory\Model\RegionFactory $regionFactory,
        \Magento\Directory\Model\CountryFactory $countryFactory,
        \Magento\Directory\Model\CurrencyFactory $currencyFactory,
        \Magento\Directory\Helper\Data $directoryData,
        \Magento\CatalogInventory\Api\StockRegistryInterface $stockRegistry,
        array $data = []
    ) {
        $this->serviceRepository = $serviceRepository;
        $this->_scopeConfig       = $scopeConfig;
        $this->_rateFactory       = $rateFactory;

        parent::__construct(
            $scopeConfig,
            $rateErrorFactory,
            $logger,
            $xmlSecurity,
            $xmlElFactory,
            $rateFactory,
            $rateMethodFactory,
            $trackFactory,
            $trackErrorFactory,
            $trackStatusFactory,
            $regionFactory,
            $countryFactory,
            $currencyFactory,
            $directoryData,
            $stockRegistry,
            $data
        );
    }

    /**
     * Make this module compatible with older versions of Magento 2.
     *
     * @param \Magento\Framework\DataObject $request
     *
     * @return $this|bool|\Magento\Framework\DataObject
     */
    public function proccessAdditionalValidation(\Magento\Framework\DataObject $request)
    {
        return $this->processAdditionalValidation($request);
    }

    /**
     * Processing additional validation (quote data) to check if carrier applicable.
     *
     * @param \Magento\Framework\DataObject $request
     *
     * @return $this|bool|\Magento\Framework\DataObject
     */
    public function processAdditionalValidation(\Magento\Framework\DataObject $request)
    {
        /**
         * validate request items data
         */
        if (!count($this->getAllItems($request))) {
            $this->errors[] = __('There is no items in this order');
        }

        /**
         * validate destination postcode
         */
        if (!$request->getDestPostcode()) {
            $this->errors[] = __('Please inform the destination postcode');
        }

        if (!empty($this->errors)) {
            /** @var \Magento\Quote\Model\Quote\Address\RateResult\Error $error */
            $error = $this->_rateErrorFactory->create();
            $error->setCarrier($this->_code);
            $error->setCarrierTitle($this->getConfigData('title'));
            $error->setErrorMessage(implode(', ', $this->errors));

            $this->debugErrors($error);

            return $error;
        }

        return $this;
    }

    /**
     * @param RateRequest $request
     *
     * @return bool|\Magento\Framework\DataObject|\Magento\Quote\Model\Quote\Address\RateResult\Error|Result|null
     */
    public function collectRates(RateRequest $request)
    {
        if (!$this->canCollectRates()) {
            $errorMessage = $this->getErrorMessage();
            $this->_logger->debug("Frenet canCollectRates: " . $errorMessage);

            return $errorMessage;
        }

        $responseItems = $this->serviceRepository->getShippingQuote($request);

        /**
         * empty or invalid response
         */
        if (!$responseItems) {
            return $this->result;
        }

        $this->setResult($responseItems);

        return $this->result;
    }

    /**
     * Checks if shipping method is correctly configured
     *
     * @return bool
     */
    public function canCollectRates()
    {
        /**
         * validate carrier active flag
         */
        if (!$this->getConfigFlag($this->_activeFlag)) {
            return false;
        }

        /** @var int $store */
        $store = $this->getStore();

        /**
         * validate origin postcode
         */
        if (!$this->_scopeConfig->getValue('shipping/origin/postcode', ScopeInterface::SCOPE_STORE, $store)) {
            return false;
        }

        /**
         * validate frenet token
         */
        if (!$this->getConfigData('token')) {
            return false;
        }

        return true;
    }
    
    /**
     * Set returned options in Magento
     *
     * @param $responseItems
     *
     * @return $this
     */
    private function setResult($responseItems)
    {
        /** @var \Magento\Shipping\Model\Rate\Result $result */
        $result = $this->_rateFactory->create();

        foreach ($responseItems as $item) {
            $method = $this->_rateMethodFactory->create();
            $method->setCarrier($this->_code)
                ->setCarrierTitle($this->getConfigData('title'))
                ->setMethod($item['Carrier'].$item['ServiceDescription'])
                ->setMethodTitle($item['Carrier'].' - '.$item['ServiceDescription'])
                ->setPrice($item['ShippingPrice'])
                ->setCost($item['ShippingPrice']);

            $result->append($method);
        }

        $this->result = $result;

        return $this;
    }

    /**
     * @param \Magento\Framework\DataObject $request
     *
     * @return \Magento\Framework\DataObject|null
     */
    protected function _doShipmentRequest(\Magento\Framework\DataObject $request)
    {
        return null;
    }
    
    /**
     * @return array
     */
    public function getAllowedMethods()
    {
        return [
            $this->_code => $this->getConfigData ('title')
        ];
    }
}
