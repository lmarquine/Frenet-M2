<?php
/**
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2018 MagedIn. (http://www.magedin.com)
 *
 * @author    Alexander Campos <alexander@frenet.com.br>
 */

namespace MagedIn\Frenet\Model\Shipping;

use Magento\Framework\HTTP\ZendClientFactory;

class FrenetApi
{

    /** @var string */
    const API_BASE_URI = 'http://api-hml.frenet.com.br/';

    /** @var string */
    const API_SHIPPING_QUOTE_URN = 'shipping/quote';

    /** @var string */
    const ENCODING_TYPE = 'application/json';

    /** @var \Psr\Log\LoggerInterface */
    private $logger;

    /**
     * ServiceRepository constructor.
     *
     * @param \Psr\Log\LoggerInterface $logger
     */
    public function __construct(
        \Psr\Log\LoggerInterface $logger
    ) {
        $this->logger = $logger;
    }

    /**
     * @param string            $token
     * @param array             $data
     * @param ZendClientFactory $clientFactory
     *
     * @return array
     * @throws \Zend_Http_Client_Exception
     */
    public function call($token, $data, ZendClientFactory $clientFactory)
    {
        $method = \Zend_Http_Client::POST;

        /** @var \Magento\Framework\HTTP\ZendClient $client */
        $client = $clientFactory->create();

        $apiUrl   = self::API_BASE_URI.self::API_SHIPPING_QUOTE_URN;
        $jsonBody = json_encode($data);

        $client->setUri($apiUrl)
            ->setMethod($method)
            ->setRawData($jsonBody, self::ENCODING_TYPE)
            ->setUrlEncodeBody(false)
            ->setHeaders([
                'Content-Type' => self::ENCODING_TYPE,
                'token' => $token]
            );

        $this->logger->debug("API Url: ".$apiUrl);
        $this->logger->debug("token: ".$token);
        $this->logger->debug("Request: ".$jsonBody);

        /** @var \Zend_Http_Response $response */
        $response = $client->request();

        if (!$response->isSuccessful()) {
            $rsObj = \serialize($response);
            $this->logger->critical("Response: ".$rsObj);
        }
        else {
            /** @var \string $bodyText */
            $bodyText = $response->getBody();
            $this->logger->debug("Body Response: ".$bodyText);

            $bodyResponse = json_decode($bodyText, true);
            
            if (isset($bodyResponse['ShippingSevicesArray'])) {
                return $bodyResponse['ShippingSevicesArray'];                
            }            

        }

        return null;
    }
}
